-- mm2 coin farm ü§ëü§ëü§ë  (auto-run ONLY when in-map)
-- Y√™u c·∫ßu: ch·ªâ nh·∫∑t coin khi ƒë√£ v√†o map game (round start)

-- // === Services / Refs ===
local TweenService = game:GetService("TweenService")
local Players      = game:GetService("Players")
local RS           = game:GetService("ReplicatedStorage")
local LP           = Players.LocalPlayer

-- B·∫£o ƒë·∫£m Character/HRP lu√¥n h·ª£p l·ªá (respawn an to√†n)
local function getChar()
    local char = LP.Character or LP.CharacterAdded:Wait()
    local hrp  = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart")
    local hum  = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid")
    return char, hrp, hum
end
local Char, HRP, Humanoid = getChar()
LP.CharacterAdded:Connect(function()
    Char, HRP, Humanoid = getChar()
end)

-- // === Round / Map detect ===
-- Tr·∫£ v·ªÅ model map ƒëang active (c√≥ thu·ªôc t√≠nh MapID + CoinContainer t·ªìn t·∫°i)
local function findActiveMap()
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:GetAttribute("MapID") and obj:FindFirstChild("CoinContainer") then
            return obj
        end
    end
    return nil
end

-- Bool: c√≥ round ƒëang di·ªÖn ra kh√¥ng?
-- ∆Øu ti√™n t√≠n hi·ªáu "InRound" n·∫øu game c√≥, n·∫øu kh√¥ng th√¨ d·ª±a v√†o map + coin
local function isRoundLive()
    -- 1) Nhi·ªÅu b·∫£n MM2 c√≥ RS.GameData.InRound (BoolValue)
    local ok, inRound = pcall(function()
        local gd = RS:FindFirstChild("GameData")
        local iv = gd and gd:FindFirstChild("InRound")
        return iv and iv.Value
    end)
    if ok and inRound ~= nil then
        return inRound
    end

    -- 2) Fallback: c√≥ map & c√≥ kh·∫£ nƒÉng spawn coin th√¨ coi nh∆∞ ƒëang trong round
    local m = findActiveMap()
    if not m then return false end
    local cc = m:FindFirstChild("CoinContainer")
    if not cc then return false end
    -- n·∫øu ƒë√£ c√≥ coin con ho·∫∑c map v·ª´a spawn (ƒë·ª£i coin xu·∫•t hi·ªán)
    if #cc:GetChildren() > 0 then return true end

    -- Ki·ªÉm tra th√™m m·ªôt nh·ªãp ng·∫Øn xem coin c√≥ xu·∫•t hi·ªán
    local t0 = os.clock()
    while os.clock() - t0 < 2 do
        if #cc:GetChildren() > 0 then return true end
        task.wait(0.1)
    end
    return false
end

-- Ch·ªù ƒë·∫øn khi round th·∫≠t s·ª± b·∫Øt ƒë·∫ßu
local function waitForRoundStart()
    while true do
        -- ƒë·ª£i c√≥ map
        local m = findActiveMap()
        if m and isRoundLive() then
            return m
        end
        task.wait(0.25)
    end
end

-- // === Coin logic ===
local function getNearest(mapModel)
    local cc = mapModel and mapModel:FindFirstChild("CoinContainer")
    if not cc then return nil end
    local closest, dist = nil, math.huge
    for _, coin in ipairs(cc:GetChildren()) do
        if coin and coin:IsA("BasePart") then
            local v = coin:FindFirstChild("CoinVisual")
            if v and not v:GetAttribute("Collected") then
                local d = (HRP.Position - coin.Position).Magnitude
                if d < dist then
                    closest = coin
                    dist = d
                end
            end
        end
    end
    return closest
end

local function tp(targetPart)
    if not (HRP and targetPart and targetPart.CFrame) then return end
    if Humanoid then Humanoid:ChangeState(Enum.HumanoidStateType.Physics) end
    local d = (HRP.Position - targetPart.Position).Magnitude
    local tw = TweenService:Create(HRP, TweenInfo.new(math.clamp(d / 25, 0.08, 2.5), Enum.EasingStyle.Linear), {CFrame = targetPart.CFrame})
    tw:Play()
    tw.Completed:Wait()
end

-- // === Main loop ===
while true do
    -- Ch·ªâ b·∫Øt ƒë·∫ßu khi v√†o map/round
    local currentMap = waitForRoundStart()

    -- Farm cho t·ªõi khi round k·∫øt th√∫c ho·∫∑c map bi·∫øn m·∫•t
    while isRoundLive() and currentMap and currentMap.Parent do
        -- n·∫øu ch·∫øt/respawn th√¨ c·∫≠p nh·∫≠t ref
        if not (Char and Char.Parent and HRP and HRP.Parent and Humanoid and Humanoid.Parent) then
            Char, HRP, Humanoid = getChar()
        end

        local target = getNearest(currentMap)
        if target then
            tp(target)
            -- gi·ªØ s√°t coin ƒë√≥ ƒë·∫øn khi collected ho·∫∑c coin bi·∫øn m·∫•t/round ƒë·ªïi
            local v = target:FindFirstChild("CoinVisual")
            local t0 = os.clock()
            while isRoundLive() and v and v.Parent and not v:GetAttribute("Collected") do
                -- n·∫øu c√≥ coin g·∫ßn h∆°n th√¨ tho√°t ƒë·ªÉ chuy·ªÉn m·ª•c ti√™u
                local n = getNearest(currentMap)
                if n and n ~= target then break end
                -- tr√°nh k·∫πt qu√° l√¢u 1 coin
                if os.clock() - t0 > 2.5 then break end
                task.wait(0.05)
            end
        else
            -- kh√¥ng th·∫•y coin -> ch·ªù ch√∫t r·ªìi check l·∫°i
            task.wait(0.15)
        end
    end

    -- Round ƒë√£ xong => quay l·∫°i v√≤ng l·∫∑p & ch·ªù round k·∫ø ti·∫øp
    task.wait(0.5)
end


